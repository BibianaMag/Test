name: Build and Push Docker

on:
  pull_request:
    types: [closed]  # This triggers the workflow when a PR is closed
    branches:
      - EN_2.2.0_AWS_N1_ANG_FE

permissions:
  contents: read  # Allow reading contents to access labels
  pull-requests: read  # Allow reading PR details and labels

env: # Centralized commonplace for reusable values
  DOCKERHUB_LOGIN_URL: "https://hub.docker.com/v2/users/login"
  DOCKERHUB_REPOSITORY: "innoart/genesis"
  DOCKER_IMAGE_PREFIX: "EN_2.2.0_AWS_N1_ANG_FE_001"
  DOCKERHUB_TAGS_URL_BASE: "https://hub.docker.com/v2/repositories"
  GITHUB_API_BASE_URL: "https://api.github.com/repos"
  DEPLOYMENT_YAML_PATH: /usr/local/src/eOps-stage/docker_compose_EN_2_2_0.yml
  DEFAULT_VERSION: "r_0_0_0_v_0_0_0"
  DOCKERHUB_TAGS_PAGE_SIZE: 100
  SERVICE_NAME: angularv2
  DEPLOY_TARGET: AWS

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    outputs:
      image_name: ${{ steps.set_image_name.outputs.image_name }}
      deploy_target: ${{ steps.set_env.outputs.deploy_target }}

    steps:
      - name: Set deployment target
        id: set_env
        run: echo "deploy_target=$DEPLOY_TARGET" >> $GITHUB_OUTPUT
      - name: Debug deploy_target
        run: echo "Deploy target is ${{ steps.set_env.outputs.deploy_target }}"
      
      - name: Build Docker image
        id: set_image_name
        run: |
          TAG="${{ env.DOCKER_IMAGE_PREFIX }}"
          IMAGE_NAME="${{ env.DOCKERHUB_REPOSITORY }}:${TAG}"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          docker build -t $IMAGE_NAME .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: docker push $IMAGE_NAME
  ssm_deploy_to_aws_ec2:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.deploy_target == 'AWS' || needs.build.outputs.deploy_target == 'all'
    continue-on-error: true

    env:
      AWS_INSTANCE_ID: 'i-05a83859adbf2a8ac'
      AWS_REGION: 'ap-south-1'
    steps:

      - name: DockerHub Login to get token
        id: dockerhub_login
        run: |
          response=$(curl -s -X POST "${{ env.DOCKERHUB_LOGIN_URL }}" -H "Content-Type: application/json" \
            -d '{"username": "${{ secrets.DOCKER_USERNAME }}", "password": "${{ secrets.DOCKER_PASSWORD }}"}')
          token=$(echo "$response" | jq -r .token)
          if [[ "$token" == "null" ]]; then
            echo "Failed to retrieve DockerHub token."
            exit 1
          fi
          echo "token=$token" >> $GITHUB_ENV
      - name: Install Vault CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          VAULT_VERSION=1.11.0
          wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip
          unzip vault_${VAULT_VERSION}_linux_amd64.zip
          sudo mv vault /usr/local/bin/
      - name: Authenticate with Vault
        id: vault_login
        run: |
          export VAULT_ADDR=${{ secrets.VAULT_URL }}  # Should be "https://vault.innoart.io"
          export VAULT_TOKEN=$(vault write auth/symphony-approle/login role_id=${{ secrets.ROLE_ID }} secret_id=${{ secrets.SECRET_ID }} -format=json | jq -r '.auth.client_token')
          echo "::add-mask::$VAULT_TOKEN"
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV
      - name: Fetch Secrets from Vault
        id: fetch_secrets
        run: |
          export VAULT_ADDR=${{ secrets.VAULT_URL }}
          export VAULT_TOKEN=${{ env.VAULT_TOKEN }}

          # Get raw secret data
          secrets=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/symphony-kv/data/GithubActionTest")
          # echo "All Secrets: $secrets"
          
          # Extract values using jq with proper field name handling
          AWS_Access_KeyID=$(echo "$secrets" | jq -r '.data.data."AWS_Access_KeyID"')
          AWS_Access_SecretKey=$(echo "$secrets" | jq -r '.data.data."AWS_Access_SecretKey"')

          # Apply masking
          echo "::add-mask::$AWS_Access_KeyID"
          echo "::add-mask::$AWS_Access_SecretKey"

          # Store in environment variables
          echo "AWS_ACCESS_KEY_ID=$AWS_Access_KeyID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_Access_SecretKey" >> $GITHUB_ENV

          # Validate
          if [ -z "$AWS_Access_KeyID" ]; then echo "::error::AWS KeyID empty"; exit 1; fi
          if [ -z "$AWS_Access_SecretKey" ]; then echo "::error::AWS SecretKey empty"; exit 1; fi
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check instance status
        id: check_instance
        run: |
          INSTANCE_ID="${{ env.AWS_INSTANCE_ID }}"
          echo "Checking status of instance $INSTANCE_ID..."
          STATE=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" \
            --query "Reservations[].Instances[].State.Name" \
            --output text)
          echo "instance_state=$STATE" >> $GITHUB_OUTPUT
          echo "Instance state: $STATE"

      - name: Execute Deployment via SSM
        if: steps.check_instance.outputs.instance_state == 'running'
        run: |
          # Prepare environment variables
          NEW_IMAGE="${{ env.DOCKERHUB_REPOSITORY }}:${{ env.DOCKER_IMAGE_PREFIX }}"
          # NEW_IMAGE="${{ needs.build.outputs.image_name }}"
          DEPLOYMENT_YAML_PATH="${{ env.DEPLOYMENT_YAML_PATH }}"
          SERVICE_NAME="${{ env.SERVICE_NAME }}"
    
          # Send SSM command (FIXED INSTANCE ID REFERENCE)
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ env.AWS_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              'export NEW_IMAGE=\"$NEW_IMAGE\"',
              'export DEPLOYMENT_YAML_PATH=\"$DEPLOYMENT_YAML_PATH\"',
              'export SERVICE_NAME=\"$SERVICE_NAME\"',
              'echo \"Bring down running deployment\"',
              'docker-compose -f \$DEPLOYMENT_YAML_PATH down',
              'docker image prune -a -f',
              'echo \"Updating image name for \${SERVICE_NAME}\"',
              'sudo sed -i \"/^\s*${SERVICE_NAME}:/,/^\s*[a-zA-Z_-]*:/s|^\(\s*image:\s*\).*|\1${NEW_IMAGE}|\" \$DEPLOYMENT_YAML_PATH',
              'echo \"Bringing up the new deployment\"',
              'docker-compose -f \$DEPLOYMENT_YAML_PATH up -d'
            ]" \
            --query "Command.CommandId" \
            --output text)
    
          # Wait for command completion (FIXED INSTANCE ID)
          echo "Waiting for SSM command to complete..."
          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id ${{ env.AWS_INSTANCE_ID }} \
            --region ${{ env.AWS_REGION }}
    
          # Get command output
          echo "Command execution output:"
          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ env.AWS_INSTANCE_ID }} \
            --region ${{ env.AWS_REGION }}
                  
  capture_invalid_deploy_target:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.deploy_target != 'AWS' && needs.build.outputs.deploy_target != 'all'
    steps:
      - name: Capture Invalid Deploy Target
        run: |
          echo "ERROR: Invalid deploy_target value: '${{ needs.build.outputs.deploy_target }}'"
          echo "::error title=Invalid Deploy Target::Expected 'AWS' or 'all', but got '${{ needs.build.outputs.deploy_target }}'"
          exit 1
    
    